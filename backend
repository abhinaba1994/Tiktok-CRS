package main

import (
    "log"
    "net/http"
    "github.com/gorilla/mux"
    "google.golang.org/grpc"
    pb "path/to/your/proto"
)

var recommendationClient pb.RecommendationServiceClient

func init() {
    conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())
    if err != nil {
        log.Fatalf("Did not connect: %v", err)
    }
    recommendationClient = pb.NewRecommendationServiceClient(conn)
}

func GetRecommendationsHandler(w http.ResponseWriter, r *http.Request) {
    userId := r.Header.Get("User-ID")
    req := &pb.RecommendationRequest{UserId: userId}
    resp, err := recommendationClient.GetRecommendations(r.Context(), req)
    if err != nil {
        http.Error(w, "Failed to get recommendations", http.StatusInternalServerError)
        return
    }
    jsonResponse, _ := json.Marshal(resp.GetRecommendations())
    w.Header().Set("Content-Type", "application/json")
    w.Write(jsonResponse)
}

func main() {
    r := mux.NewRouter()
    r.HandleFunc("/api/recommendations", GetRecommendationsHandler)
    log.Fatal(http.ListenAndServe(":8080", r))
}
